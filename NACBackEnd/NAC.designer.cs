#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NACBackEnd
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="nac")]
	public partial class NACDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    partial void InsertNet(Net instance);
    partial void UpdateNet(Net instance);
    partial void DeleteNet(Net instance);
    #endregion
		
		public NACDataContext() : 
				base(global::NACBackEnd.Properties.Settings.Default.nacConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public NACDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NACDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NACDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NACDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<Net> Nets
		{
			get
			{
				return this.GetTable<Net>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Node")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private int _Weight;
		
		private string _Net;
		
		private int _Turn;
		
		private EntityRef<Net> _Net1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnWeightChanging(int value);
    partial void OnWeightChanged();
    partial void OnNetChanging(string value);
    partial void OnNetChanged();
    partial void OnTurnChanging(int value);
    partial void OnTurnChanged();
    #endregion
		
		public Node()
		{
			this._Net1 = default(EntityRef<Net>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int NOT NULL")]
		public int Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Net", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Net
		{
			get
			{
				return this._Net;
			}
			set
			{
				if ((this._Net != value))
				{
					if (this._Net1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNetChanging(value);
					this.SendPropertyChanging();
					this._Net = value;
					this.SendPropertyChanged("Net");
					this.OnNetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Turn", DbType="Int NOT NULL")]
		public int Turn
		{
			get
			{
				return this._Turn;
			}
			set
			{
				if ((this._Turn != value))
				{
					this.OnTurnChanging(value);
					this.SendPropertyChanging();
					this._Turn = value;
					this.SendPropertyChanged("Turn");
					this.OnTurnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Net_Node", Storage="_Net1", ThisKey="Net", OtherKey="Name", IsForeignKey=true)]
		public Net Net1
		{
			get
			{
				return this._Net1.Entity;
			}
			set
			{
				Net previousValue = this._Net1.Entity;
				if (((previousValue != value) 
							|| (this._Net1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Net1.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._Net1.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._Net = value.Name;
					}
					else
					{
						this._Net = default(string);
					}
					this.SendPropertyChanged("Net1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Net")]
	public partial class Net : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private int _Win;
		
		private int _Loss;
		
		private int _Draw;
		
		private string _P1Sequence;
		
		private string _P2Sequence;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWinChanging(int value);
    partial void OnWinChanged();
    partial void OnLossChanging(int value);
    partial void OnLossChanged();
    partial void OnDrawChanging(int value);
    partial void OnDrawChanged();
    partial void OnP1SequenceChanging(string value);
    partial void OnP1SequenceChanged();
    partial void OnP2SequenceChanging(string value);
    partial void OnP2SequenceChanged();
    #endregion
		
		public Net()
		{
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Win", DbType="Int NOT NULL")]
		public int Win
		{
			get
			{
				return this._Win;
			}
			set
			{
				if ((this._Win != value))
				{
					this.OnWinChanging(value);
					this.SendPropertyChanging();
					this._Win = value;
					this.SendPropertyChanged("Win");
					this.OnWinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Loss", DbType="Int NOT NULL")]
		public int Loss
		{
			get
			{
				return this._Loss;
			}
			set
			{
				if ((this._Loss != value))
				{
					this.OnLossChanging(value);
					this.SendPropertyChanging();
					this._Loss = value;
					this.SendPropertyChanged("Loss");
					this.OnLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Draw", DbType="Int NOT NULL")]
		public int Draw
		{
			get
			{
				return this._Draw;
			}
			set
			{
				if ((this._Draw != value))
				{
					this.OnDrawChanging(value);
					this.SendPropertyChanging();
					this._Draw = value;
					this.SendPropertyChanged("Draw");
					this.OnDrawChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P1Sequence", DbType="VarChar(MAX)")]
		public string P1Sequence
		{
			get
			{
				return this._P1Sequence;
			}
			set
			{
				if ((this._P1Sequence != value))
				{
					this.OnP1SequenceChanging(value);
					this.SendPropertyChanging();
					this._P1Sequence = value;
					this.SendPropertyChanged("P1Sequence");
					this.OnP1SequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P2Sequence", DbType="VarChar(MAX)")]
		public string P2Sequence
		{
			get
			{
				return this._P2Sequence;
			}
			set
			{
				if ((this._P2Sequence != value))
				{
					this.OnP2SequenceChanging(value);
					this.SendPropertyChanging();
					this._P2Sequence = value;
					this.SendPropertyChanged("P2Sequence");
					this.OnP2SequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Net_Node", Storage="_Nodes", ThisKey="Name", OtherKey="Net")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Net1 = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Net1 = null;
		}
	}
}
#pragma warning restore 1591
